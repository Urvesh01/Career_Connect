import { ChangeDetectorRef, ElementRef, EnvironmentInjector, Injector, QueryList, ViewContainerRef } from '@angular/core';
import { PivotGridType } from '../common/grid.interface';
import { IgxGridHeaderRowComponent } from '../headers/grid-header-row.component';
import { IPivotDimension, IPivotDimensionData, IPivotGridRecord } from './pivot-grid.interface';
import { IgxPivotRowDimensionContentComponent } from './pivot-row-dimension-content.component';
import * as i0 from "@angular/core";
/**
 *
 * For all intents & purposes treat this component as what a <thead> usually is in the default <table> element.
 *
 * This container holds the pivot grid header elements and their behavior/interactions.
 *
 * @hidden @internal
 */
export declare class IgxPivotRowDimensionMrlRowComponent extends IgxGridHeaderRowComponent {
    grid: PivotGridType;
    protected injector: Injector;
    protected envInjector: EnvironmentInjector;
    protected viewRef: ViewContainerRef;
    pivotDim: boolean;
    mrlBlock: boolean;
    get rowsTemplate(): string;
    get colsTemplate(): string;
    /**
     * @hidden @internal
     */
    rowIndex: number;
    /**
     * @hidden @internal
     */
    rowGroup: IPivotGridRecord[];
    /**
     * @hidden @internal
     */
    groupedData: IPivotGridRecord[][];
    /**
     * @hidden @internal
     */
    contentCells: QueryList<IgxPivotRowDimensionContentComponent>;
    constructor(grid: PivotGridType, ref: ElementRef<HTMLElement>, injector: Injector, envInjector: EnvironmentInjector, cdr: ChangeDetectorRef, viewRef: ViewContainerRef);
    /**
     * @hidden @internal
     */
    rowDimensionData: IPivotDimensionData;
    protected getRowMRLTemplate(forRows: boolean, rows: IPivotGridRecord[]): string;
    rowDimensionWidthCombined(dims: IPivotDimension[]): number;
    static ɵfac: i0.ɵɵFactoryDeclaration<IgxPivotRowDimensionMrlRowComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<IgxPivotRowDimensionMrlRowComponent, "igx-pivot-row-dimension-mrl-row", never, { "rowIndex": { "alias": "rowIndex"; "required": false; }; "rowGroup": { "alias": "rowGroup"; "required": false; }; "groupedData": { "alias": "groupedData"; "required": false; }; }, {}, never, never, true, never>;
}
