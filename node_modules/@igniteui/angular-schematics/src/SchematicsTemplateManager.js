"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchematicsTemplateManager = void 0;
const angular_templates_1 = require("@igniteui/angular-templates");
const cli_core_1 = require("@igniteui/cli-core");
const path = __importStar(require("path"));
class SchematicsTemplateManager extends cli_core_1.BaseTemplateManager {
    constructor() {
        super("");
        this.frameworks.push({
            id: "angular",
            name: "angular",
            projectLibraries: require("@igniteui/angular-templates").default
        });
    }
    loadFromConfig(filePath) {
        let template = null;
        if (cli_core_1.Util.fileExists(filePath)) {
            const rootPath = path.dirname(filePath);
            const settings = require(filePath);
            switch (`${settings.framework}|${settings.projectType}`) {
                case "angular|igx-ts":
                    template = new angular_templates_1.IgniteUIForAngularTemplate(rootPath);
                    break;
                default:
                    // not supported in schematics, ignore
                    break;
            }
            if (template !== null) {
                Object.assign(template, settings);
            }
        }
        return template; // TODO
    }
}
exports.SchematicsTemplateManager = SchematicsTemplateManager;
