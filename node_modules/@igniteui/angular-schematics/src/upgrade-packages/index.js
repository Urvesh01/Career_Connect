"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = default_1;
const tasks_1 = require("@angular-devkit/schematics/tasks");
const cli_core_1 = require("@igniteui/cli-core");
const rxjs_1 = require("rxjs");
const SchematicsTemplateManager_1 = require("../SchematicsTemplateManager");
const NgFileSystem_1 = require("../utils/NgFileSystem");
function default_1(options) {
    return (tree, context) => {
        var _a, _b, _c;
        cli_core_1.App.initialize("angular-cli");
        cli_core_1.GoogleAnalytics.post({
            t: "screenview",
            cd: "Upgrade packages"
        });
        const templateManager = new SchematicsTemplateManager_1.SchematicsTemplateManager();
        const config = cli_core_1.ProjectConfig.getConfig();
        const library = templateManager.getProjectLibrary('angular', ((_a = config.project) === null || _a === void 0 ? void 0 : _a.projectType) || 'igx-ts');
        let project;
        if (!((_b = config.project) === null || _b === void 0 ? void 0 : _b.projectTemplate) || !library.hasProject((_c = config.project) === null || _c === void 0 ? void 0 : _c.projectTemplate)) {
            // in case project template is missing from the config we provide backward.
            project = library.getProject(library.projectIds[0]);
        }
        else {
            project = library.getProject(config.project.projectTemplate);
        }
        (0, NgFileSystem_1.setVirtual)(tree);
        return (0, rxjs_1.defer)(() => __awaiter(this, void 0, void 0, function* () {
            const success = yield project.upgradeIgniteUIPackages("", "");
            if (success && !options.skipInstall) {
                context.addTask(new tasks_1.NodePackageInstallTask());
            }
            return tree;
        }));
    };
}
