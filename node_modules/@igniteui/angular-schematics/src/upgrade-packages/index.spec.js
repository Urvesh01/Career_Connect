"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const tasks_1 = require("@angular-devkit/schematics/tasks");
const testing_1 = require("@angular-devkit/schematics/testing");
const cli_core_1 = require("@igniteui/cli-core");
const path = __importStar(require("path"));
const SchematicsTemplateManager_1 = require("../SchematicsTemplateManager");
const NgFileSystem_1 = require("../utils/NgFileSystem");
describe("Schematics upgrade-packages", () => {
    // tslint:disable: object-literal-sort-keys
    let appTree;
    const collectionPath = path.join(__dirname, "../collection.json");
    const schematicName = "upgrade-packages";
    beforeAll(() => {
        spyOn(cli_core_1.GoogleAnalytics, "post");
        appTree = new testing_1.UnitTestTree(new schematics_1.EmptyTree());
    });
    it("calls project template upgradeIgniteUIPackages and schedules install accordingly", () => __awaiter(void 0, void 0, void 0, function* () {
        const runner = new testing_1.SchematicTestRunner("schematics", collectionPath);
        const mockConfig = {
            customTemplates: [],
            project: {
                framework: "angular",
                projectType: "igx-ts",
                projectTemplate: "mock-side-nav",
            }
        };
        spyOn(cli_core_1.ProjectConfig, "getConfig").and.returnValue(mockConfig);
        const mockBaseTemplate = {
            id: "mock-template-id",
            name: "mock-template",
            description: "A mock template",
            delimiters: {
                content: { start: "{{", end: "}}" },
                path: { start: "[[", end: "]]" }
            },
            dependencies: ["mock-dependency"],
            framework: "angular",
            projectType: "ts",
            hasExtraConfiguration: true,
            templatePaths: ["/path/to/template"],
            generateConfig: jasmine.createSpy().and.returnValue({}),
            getExtraConfiguration: jasmine.createSpy().and.returnValue([]),
            setExtraConfiguration: jasmine.createSpy()
        };
        const mockProjectTemplate = Object.assign(Object.assign({}, mockBaseTemplate), { installModules: jasmine.createSpy().and.callFake(() => { }), upgradeIgniteUIPackages: () => __awaiter(void 0, void 0, void 0, function* () { return true; }) });
        const mockTemplate = Object.assign(Object.assign({}, mockBaseTemplate), { components: ["mock-component"], controlGroup: "mock-group", listInComponentTemplates: true, listInCustomTemplates: true, packages: ["mock-package"], registerInProject: jasmine.createSpy() });
        const mockLib = {
            name: "mock-library",
            themes: ["mock-theme"],
            components: [{
                    name: "mock-component",
                    description: "A mock component",
                    group: "mock-group",
                    groupPriority: 1,
                    templates: [mockTemplate]
                }],
            projectIds: ["another-mock"],
            projects: [mockProjectTemplate],
            templates: [mockTemplate],
            projectType: "ts",
            generateTemplateFolderPath: "/path/to/templates",
            getCustomTemplateNames: jasmine.createSpy().and.returnValue([]),
            getTemplateByName: jasmine.createSpy().and.returnValue(mockTemplate),
            getTemplateById: jasmine.createSpy().and.returnValue(mockTemplate),
            getComponentByName: jasmine.createSpy().and.returnValue({
                name: "mock-component",
                description: "A mock component",
                group: "mock-group",
                groupPriority: 1,
                templates: [mockTemplate]
            }),
            getComponentGroupNames: jasmine.createSpy().and.returnValue(["mock-group"]),
            getComponentsByGroup: jasmine.createSpy().and.returnValue([{
                    name: "mock-component",
                    description: "A mock component",
                    group: "mock-group",
                    groupPriority: 1,
                    templates: [mockTemplate]
                }]),
            getComponentGroups: jasmine.createSpy().and.returnValue([{
                    name: "mock-group",
                    description: "A mock component group"
                }]),
            getCustomTemplates: jasmine.createSpy().and.returnValue([mockTemplate]),
            getProject: jasmine.createSpy().and.returnValue(mockProjectTemplate),
            hasProject: jasmine.createSpy().and.returnValue(false),
            hasTemplate: jasmine.createSpy().and.returnValue(false),
            registerTemplate: jasmine.createSpy()
        };
        const projLibSpy = spyOn(SchematicsTemplateManager_1.SchematicsTemplateManager.prototype, "getProjectLibrary");
        projLibSpy.and.returnValue(mockLib);
        const upgradeSpy = spyOn(mockProjectTemplate, "upgradeIgniteUIPackages");
        upgradeSpy.and.returnValue(Promise.resolve(false));
        yield runner.runSchematic(schematicName, {}, appTree);
        expect(cli_core_1.GoogleAnalytics.post).toHaveBeenCalledWith({
            t: "screenview",
            cd: "Upgrade packages"
        });
        expect(projLibSpy).toHaveBeenCalledWith("angular", "igx-ts");
        expect(mockLib.hasProject).toHaveBeenCalledWith("mock-side-nav");
        expect(mockLib.getProject).toHaveBeenCalledWith("another-mock");
        expect(cli_core_1.App.container.get(cli_core_1.FS_TYPE_TOKEN)).toEqual(cli_core_1.FsTypes.virtual, "setVirtual not called");
        expect(cli_core_1.App.container.get(cli_core_1.FS_TOKEN)).toEqual(jasmine.any(NgFileSystem_1.NgTreeFileSystem));
        expect(upgradeSpy).toHaveBeenCalledTimes(1);
        expect(upgradeSpy).toHaveBeenCalledWith("", "");
        expect(runner.tasks).toEqual([]);
        upgradeSpy.and.returnValue(Promise.resolve(true));
        yield runner.runSchematic(schematicName, { skipInstall: true }, appTree);
        expect(upgradeSpy).toHaveBeenCalledTimes(2);
        expect(runner.tasks).toEqual([]);
        yield runner.runSchematic(schematicName, {}, appTree);
        expect(upgradeSpy).toHaveBeenCalledTimes(3);
        const installTaskOptions = new tasks_1.NodePackageInstallTask().toConfiguration();
        expect(runner.tasks).toContain(jasmine.objectContaining(installTaskOptions));
    }));
});
