"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const testing_1 = require("@angular-devkit/schematics/testing");
const cli_core_1 = require("@igniteui/cli-core");
const path = __importStar(require("path"));
const AppProjectSchematic = __importStar(require("../app-projects/index"));
const SchematicsPromptSession_1 = require("../prompt/SchematicsPromptSession");
const collectionPath = path.join(__dirname, "../collection.json");
describe("Schematics ng-new", () => {
    beforeAll(() => {
        spyOn(cli_core_1.GoogleAnalytics, "post");
    });
    it("works with no name provided", () => {
        const runner = new testing_1.SchematicTestRunner("schematics", collectionPath);
        const myTree = schematics_1.Tree.empty();
        const workingDirectory = "my-test-project";
        const mockBaseTemplate = {
            id: "mock-template-id",
            name: "mock-template",
            description: "A mock template",
            delimiters: {
                content: { start: "{{", end: "}}" },
                path: { start: "[[", end: "]]" }
            },
            dependencies: ["mock-dependency"],
            framework: "angular",
            projectType: "ts",
            hasExtraConfiguration: true,
            templatePaths: ["/path/to/template"],
            generateConfig: jasmine.createSpy().and.returnValue({}),
            getExtraConfiguration: jasmine.createSpy().and.returnValue([]),
            setExtraConfiguration: jasmine.createSpy()
        };
        const mockProjectTemplate = Object.assign(Object.assign({}, mockBaseTemplate), { installModules: jasmine.createSpy().and.callFake(() => { }), upgradeIgniteUIPackages: jasmine.createSpy().and.returnValue(Promise.resolve(true)) });
        const mockTemplate = Object.assign(Object.assign({}, mockBaseTemplate), { components: ["mock-component"], controlGroup: "mock-group", listInComponentTemplates: true, listInCustomTemplates: true, packages: ["mock-package"], registerInProject: jasmine.createSpy() });
        const mockLibrary = {
            name: "mock-library",
            themes: ["mock-theme"],
            components: [{
                    name: "mock-component",
                    description: "A mock component",
                    group: "mock-group",
                    groupPriority: 1,
                    templates: [mockTemplate]
                }],
            projectIds: ["another-mock"],
            projects: [mockProjectTemplate],
            templates: [mockTemplate],
            projectType: "ts",
            generateTemplateFolderPath: "/path/to/templates",
            getCustomTemplateNames: jasmine.createSpy().and.returnValue([]),
            getTemplateByName: jasmine.createSpy().and.returnValue(mockTemplate),
            getTemplateById: jasmine.createSpy().and.returnValue(mockTemplate),
            getComponentByName: jasmine.createSpy().and.returnValue({
                name: "mock-component",
                description: "A mock component",
                group: "mock-group",
                groupPriority: 1,
                templates: [mockTemplate]
            }),
            getComponentGroupNames: jasmine.createSpy().and.returnValue(["mock-group"]),
            getComponentsByGroup: jasmine.createSpy().and.returnValue([{
                    name: "mock-component",
                    description: "A mock component",
                    group: "mock-group",
                    groupPriority: 1,
                    templates: [mockTemplate]
                }]),
            getComponentGroups: jasmine.createSpy().and.returnValue([{
                    name: "mock-group",
                    description: "A mock component group"
                }]),
            getCustomTemplates: jasmine.createSpy().and.returnValue([mockTemplate]),
            getProject: jasmine.createSpy().and.returnValue(mockProjectTemplate),
            hasProject: jasmine.createSpy().and.returnValue(false),
            hasTemplate: jasmine.createSpy().and.returnValue(false),
            registerTemplate: jasmine.createSpy()
        };
        const mockProject = {
            upgradeIgniteUIPackages: () => Promise.resolve(true)
        };
        spyOn(mockProject, "upgradeIgniteUIPackages").and.callThrough();
        const mockSession = {
            chooseActionLoop: spyOn(SchematicsPromptSession_1.SchematicsPromptSession.prototype, "chooseActionLoop")
                .and.returnValue(Promise.resolve()),
            getProjectLibraryByType: spyOn(SchematicsPromptSession_1.SchematicsPromptSession.prototype, "getProjectLibraryByType")
                .and.returnValue((Promise.resolve(mockLibrary))),
            getProjectTemplate: spyOn(SchematicsPromptSession_1.SchematicsPromptSession.prototype, "getProjectTemplate")
                .and.returnValue(Promise.resolve(mockProjectTemplate)),
            getTheme: spyOn(SchematicsPromptSession_1.SchematicsPromptSession.prototype, "getTheme")
                .and.returnValue(Promise.resolve("custom")),
            getUserInput: spyOn(SchematicsPromptSession_1.SchematicsPromptSession.prototype, "getUserInput")
                .and.returnValue(Promise.resolve(workingDirectory))
        };
        const userAnswers = new Map();
        userAnswers.set("upgradePackages", true);
        Object.defineProperty(SchematicsPromptSession_1.SchematicsPromptSession.prototype, "userAnswers", {
            configurable: true,
            get: () => userAnswers,
            set: () => void 0
        });
        spyOn(AppProjectSchematic, "default").and.returnValue((currentTree, _context) => {
            currentTree.create("gitignore", "");
            return currentTree;
        });
        runner.runSchematic("ng-new", { version: "8.0.3" }, myTree)
            .then((e) => {
            for (const mockFunc of Object.entries(mockSession)) {
                expect(mockFunc[1]).toHaveBeenCalled();
            }
            expect(AppProjectSchematic.default).toHaveBeenCalled();
            expect(e.files.length).toEqual(1);
            expect(e.exists(`${workingDirectory}/.gitignore`)).toBeTruthy();
            const taskOptions = runner.tasks.map(task => task.options);
            // tslint:disable:object-literal-sort-keys
            const expectedInstall = {
                command: "install",
                quiet: true,
                workingDirectory,
                packageName: undefined,
                packageManager: undefined
            };
            const expectedInit = {
                workingDirectory,
                authorEmail: undefined,
                authorName: undefined,
                commit: true,
                message: `Initial commit for project: ${workingDirectory}`
            };
            const expectedStart = {
                collection: null,
                name: "start",
                options: {
                    directory: "my-test-project"
                }
            };
            expect(taskOptions.length).toBe(3);
            expect(mockProject.upgradeIgniteUIPackages).toHaveBeenCalled();
            expect(taskOptions).toContain(jasmine.objectContaining(expectedInstall));
            expect(taskOptions).toContain(expectedInit);
            expect(taskOptions).toContain(expectedStart);
        });
    });
    it("works with name provided", () => {
        const runner = new testing_1.SchematicTestRunner("schematics", collectionPath);
        const myTree = schematics_1.Tree.empty();
        const workingDirectory = "my-test-project";
        const mockProject = {
            upgradeIgniteUIPackages: () => Promise.resolve(true)
        };
        spyOn(mockProject, "upgradeIgniteUIPackages").and.callThrough();
        const userAnswers = new Map();
        userAnswers.set("upgradePackages", true);
        spyOnProperty(SchematicsPromptSession_1.SchematicsPromptSession.prototype, "userAnswers", "get").and.returnValue(userAnswers);
        spyOn(AppProjectSchematic, "default").and.returnValue((currentTree, _context) => {
            currentTree.create("gitignore", "");
            return currentTree;
        });
        runner.runSchematic("ng-new", { version: "8.0.3", name: workingDirectory }, myTree)
            .then((e) => {
            expect(AppProjectSchematic.default).toHaveBeenCalled();
            expect(e.files.length).toEqual(1);
            expect(e.exists(`${workingDirectory}/.gitignore`)).toBeTruthy();
            const taskOptions = runner.tasks.map(task => task.options);
            // tslint:disable:object-literal-sort-keys
            const expectedInstall = {
                command: "install",
                quiet: true,
                workingDirectory,
                packageName: undefined,
                packageManager: undefined
            };
            const expectedInit = {
                workingDirectory,
                authorEmail: undefined,
                authorName: undefined,
                commit: true,
                message: `Initial commit for project: ${workingDirectory}`
            };
            expect(taskOptions.length).toBe(2);
            expect(mockProject.upgradeIgniteUIPackages).toHaveBeenCalled();
            expect(taskOptions).toContain(jasmine.objectContaining(expectedInstall));
            expect(taskOptions).toContain(expectedInit);
        });
    });
});
