"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NgTreeFileSystem = void 0;
exports.setVirtual = setVirtual;
const cli_core_1 = require("@igniteui/cli-core");
const minimatch_1 = require("minimatch");
const path = __importStar(require("path"));
class NgTreeFileSystem {
    constructor(tree) {
        this.tree = tree;
    }
    fileExists(filePath) {
        return this.tree.exists(filePath);
    }
    readFile(filePath, _encoding) {
        return (this.tree.read(filePath) || "").toString();
    }
    writeFile(filePath, text) {
        return this.tree.overwrite(filePath, text);
    }
    directoryExists(dirPath) {
        const dir = this.tree.getDir(dirPath);
        return dir.subdirs.length || dir.subfiles.length ? true : false;
    }
    /**
     * Returns a list of file paths under a directory based on a match pattern
     * @param dirPath Root dir to search in
     * @param pattern Supports only recursive wildcard `\*\*\/\*`
     * @param ignorePatterns Optional patterns to ignore for each subdirectory
     */
    glob(dirPath, pattern, ignorePatterns) {
        const dir = this.tree.getDir(dirPath);
        const entries = [];
        const visitor = (_fullPath, entry) => {
            if (entry && (0, minimatch_1.minimatch)(entry.path, pattern)) {
                entries.push(entry.path);
            }
        };
        if (ignorePatterns === null || ignorePatterns === void 0 ? void 0 : ignorePatterns.length) {
            const recurse = (dir) => {
                for (const subdirPath of dir.subdirs) {
                    if (ignorePatterns.every(p => !(0, minimatch_1.minimatch)(subdirPath, p))) {
                        const subDir = dir.dir(subdirPath);
                        if (subDir.subdirs.length) {
                            recurse(subDir);
                            continue;
                        }
                        for (const file of dir.subfiles) {
                            if ((0, minimatch_1.minimatch)(file, pattern) && ignorePatterns.every(p => !(0, minimatch_1.minimatch)(file, p))) {
                                entries.push(path.posix.normalize(`${dir.path}/${file}`));
                            }
                        }
                    }
                }
            };
            recurse(dir);
            return entries;
        }
        dir.visit(visitor);
        return entries;
    }
}
exports.NgTreeFileSystem = NgTreeFileSystem;
function setVirtual(tree) {
    cli_core_1.App.container.set(cli_core_1.FS_TOKEN, new NgTreeFileSystem(tree));
    cli_core_1.App.container.set(cli_core_1.FS_TYPE_TOKEN, cli_core_1.FsTypes.virtual);
}
