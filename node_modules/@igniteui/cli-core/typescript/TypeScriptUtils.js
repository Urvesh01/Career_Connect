"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeScriptUtils = void 0;
// tslint:disable-next-line:no-implicit-dependencies
const ts = __importStar(require("typescript"));
const FileSystem_1 = require("../types/FileSystem");
const util_1 = require("../util");
const Util_1 = require("../util/Util");
const os_1 = require("os");
class TypeScriptUtils {
    //#region Utility functions
    /**
     * Returns an source file, adds new line placeholders as the TS parser won't add `SyntaxKind.NewLineTrivia` to the AST.
     * @param filePath Path of file to read
     */
    static getFileSource(filePath, useJSX = false) {
        const fileSystem = util_1.App.container.get(FileSystem_1.FS_TOKEN);
        let targetFile = fileSystem.readFile(filePath);
        targetFile = targetFile.replace(/(\r?\n)(\r?\n)/g, `$1${this.newLinePlaceHolder}$2`);
        const targetSource = this.createSourceFile(filePath, targetFile, ts.ScriptTarget.Latest, true, useJSX);
        return targetSource;
    }
    /**
     * Retrieves the source text, removes new line placeholders
     * @param source The source AST to print
     */
    static getSourceText(source) {
        const printer = this.createPrinter();
        let text = printer.printFile(source);
        text = text.replace(new RegExp(`(\r?\n)\\s*?${Util_1.Util.escapeRegExp(this.newLinePlaceHolder)}(\r?\n)`, "g"), `$1$2`);
        return text;
    }
    static createSourceFile(filePath, text, scriptTarget, setParentNodes, useJSX = false) {
        return ts.createSourceFile(filePath, text, scriptTarget, setParentNodes, useJSX ? ts.ScriptKind.JS : ts.ScriptKind.TS);
    }
    static createPrinter() {
        const options = {
            newLine: os_1.EOL === "\n" ? ts.NewLineKind.LineFeed : ts.NewLineKind.CarriageReturnLineFeed
        };
        return ts.createPrinter(options);
    }
    static saveFile(filePath, sourceOrContent) {
        const fileSystem = util_1.App.container.get(FileSystem_1.FS_TOKEN);
        // https://github.com/Microsoft/TypeScript/issues/10786#issuecomment-288987738
        if (typeof sourceOrContent === "object" && ts.isSourceFile(sourceOrContent)) {
            const text = this.getSourceText(sourceOrContent);
            fileSystem.writeFile(filePath, text);
            return;
        }
        fileSystem.writeFile(filePath, sourceOrContent);
    }
}
exports.TypeScriptUtils = TypeScriptUtils;
TypeScriptUtils.newLinePlaceHolder = "//I keep the new line";
