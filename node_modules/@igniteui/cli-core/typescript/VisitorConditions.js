"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PropertyAssignmentWithStringLiteralValueCondition = exports.variableAsParentCondition = void 0;
const ts = __importStar(require("typescript"));
/**
 * Starting from the current node, look up the AST to find the variable declaration that holds the current node.
 * @param astTransformer Instance of the transformer that will look up the variable in the AST.
 * @param variableName Name of the variable to look for.
 */
const variableAsParentCondition = (astTransformer, variableName) => {
    return (node) => !!astTransformer.findNodeAncestor(node, (node) => ts.isVariableDeclaration(node) &&
        node.name.getText() === variableName);
};
exports.variableAsParentCondition = variableAsParentCondition;
/**
 * Checks if the node is a property assignment with a specific name and string literal value.
 * @param name The name of the property assignment.
 * @param literal The string literal value to check for.
 */
const PropertyAssignmentWithStringLiteralValueCondition = (name, literal) => {
    return (node) => ts.isPropertyAssignment(node) &&
        ts.isIdentifier(node.name) &&
        node.name.text === name &&
        ts.isStringLiteral(node.initializer) &&
        node.initializer.text === literal;
};
exports.PropertyAssignmentWithStringLiteralValueCondition = PropertyAssignmentWithStringLiteralValueCondition;
