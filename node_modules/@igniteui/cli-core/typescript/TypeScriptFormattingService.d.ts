import * as ts from 'typescript';
import { FormattingService, FormatSettings } from '../types';
export declare class TypeScriptFormattingService implements FormattingService {
    path: string;
    private readonly formatSettings?;
    private _languageServiceHost;
    private _formatSettingsFromConfig;
    private _defaultFormatSettings;
    /**
     * Create a new formatting service for the given source file.
     * @param path Path to the source file to format.
     * @param formatSettings Custom formatting settings to apply.
     * @param compilerOptions Compiler options to use when transforming the source file.
     */
    constructor(path: string, formatSettings?: FormatSettings);
    /**
     * Apply formatting to a source file.
     */
    applyFormatting(sourceFile: ts.SourceFile): string;
    /**
     * The format options to use when printing the source file.
     */
    get formatOptions(): FormatSettings;
    /**
     * Creates a language service host for the source file.
     * The host is used by TS to access the FS and read the source file.
     * In this case we are operating on a single source file so we only need to provide its name and contents.
     * @param sourceFile The source file to create the host for.
     */
    private getOrCreateLanguageServiceHost;
    /**
     * Apply formatting changes (position based) in reverse
     * from https://github.com/Microsoft/TypeScript/issues/1651#issuecomment-69877863
     */
    private applyChanges;
    /**
     * Try and parse formatting from project `.editorconfig`
     */
    private readFormatConfigs;
}
