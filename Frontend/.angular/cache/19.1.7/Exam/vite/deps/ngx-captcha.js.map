{
  "version": 3,
  "sources": ["../../../../../../node_modules/ngx-captcha/fesm2020/ngx-captcha.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, InjectFlags, Directive, Input, Output, forwardRef, Component, ViewChild, NgModule } from '@angular/core';\nimport { NgControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nconst _c0 = [\"captchaWrapperElem\"];\nclass ScriptService {\n  constructor(zone) {\n    this.zone = zone;\n    this.scriptElemId = \"ngx-catpcha-script\";\n    /**\r\n     * Name of the global google recaptcha script\r\n     */\n    this.windowGrecaptcha = \"grecaptcha\";\n    /**\r\n     * Name of enterpise property in the global google recaptcha script\r\n     */\n    this.windowGrecaptchaEnterprise = \"enterprise\";\n    /**\r\n     * Name of the global callback\r\n     */\n    this.windowOnLoadCallbackProperty = \"ngx_captcha_onload_callback\";\n    /**\r\n     * Name of the global callback for enterprise\r\n     */\n    this.windowOnLoadEnterpriseCallbackProperty = \"ngx_captcha_onload_enterprise_callback\";\n    this.globalDomain = \"recaptcha.net\";\n    this.defaultDomain = \"google.com\";\n    this.enterpriseApi = \"enterprise.js\";\n    this.defaultApi = \"api.js\";\n  }\n  registerCaptchaScript(config, render, onLoad, language) {\n    if (this.grecaptchaScriptLoaded(config.useEnterprise)) {\n      // recaptcha script is already loaded\n      // just call the callback\n      if (config.useEnterprise) {\n        this.zone.run(() => {\n          onLoad(window[this.windowGrecaptcha][this.windowGrecaptchaEnterprise]);\n        });\n      } else {\n        this.zone.run(() => {\n          onLoad(window[this.windowGrecaptcha]);\n        });\n      }\n      return;\n    }\n    // we need to patch the callback through global variable, otherwise callback is not accessible\n    // note: https://github.com/Enngage/ngx-captcha/issues/2\n    if (config.useEnterprise) {\n      window[this.getCallbackName(true)] = () => this.zone.run(onLoad.bind(this, window[this.windowGrecaptcha][this.windowGrecaptchaEnterprise]));\n    } else {\n      window[this.getCallbackName(false)] = () => this.zone.run(onLoad.bind(this, window[this.windowGrecaptcha]));\n    }\n    // prepare script elem\n    const scriptElem = document.createElement(\"script\");\n    scriptElem.id = this.scriptElemId;\n    scriptElem.innerHTML = \"\";\n    scriptElem.src = this.getCaptchaScriptUrl(config, render, language);\n    scriptElem.async = true;\n    scriptElem.defer = true;\n    // add script to header\n    document.getElementsByTagName(\"head\")[0].appendChild(scriptElem);\n  }\n  cleanup() {\n    const elem = document.getElementById(this.scriptElemId);\n    if (elem) {\n      elem.remove();\n    }\n    window[this.getCallbackName()] = undefined;\n    window[this.windowGrecaptcha] = undefined;\n  }\n  /**\r\n   * Indicates if google recaptcha script is available and ready to be used\r\n   */\n  grecaptchaScriptLoaded(useEnterprise) {\n    if (!window[this.getCallbackName(useEnterprise)] || !window[this.windowGrecaptcha]) {\n      return false;\n    } else if (useEnterprise && window[this.windowGrecaptcha][this.windowGrecaptchaEnterprise]) {\n      return true;\n      // if only enterprise script is loaded we need to check some v3's method\n    } else if (window[this.windowGrecaptcha].execute) {\n      return true;\n    }\n    return false;\n  }\n  /**\r\n   * Gets global callback name\r\n   * @param useEnterprise Optional flag for enterprise script\r\n   * @private\r\n   */\n  getCallbackName(useEnterprise) {\n    return useEnterprise ? this.windowOnLoadEnterpriseCallbackProperty : this.windowOnLoadCallbackProperty;\n  }\n  /**\r\n   * Gets language param used in script url\r\n   */\n  getLanguageParam(hl) {\n    if (!hl) {\n      return \"\";\n    }\n    return `&hl=${hl}`;\n  }\n  /**\r\n   * Url to google api script\r\n   */\n  getCaptchaScriptUrl(config, render, language) {\n    const domain = config.useGlobalDomain ? this.globalDomain : this.defaultDomain;\n    const api = config.useEnterprise ? this.enterpriseApi : this.defaultApi;\n    const callback = this.getCallbackName(config.useEnterprise);\n    return `https://www.${domain}/recaptcha/${api}?onload=${callback}&render=${render}${this.getLanguageParam(language)}`;\n  }\n}\n/** @nocollapse */\nScriptService.ɵfac = function ScriptService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || ScriptService)(i0.ɵɵinject(i0.NgZone));\n};\n/** @nocollapse */\nScriptService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ScriptService,\n  factory: ScriptService.ɵfac,\n  providedIn: \"root\"\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ScriptService, [{\n    type: Injectable,\n    args: [{\n      providedIn: \"root\"\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }];\n  }, null);\n})();\nclass BaseReCaptchaComponentDirective {\n  constructor(renderer, zone, injector, scriptService) {\n    this.renderer = renderer;\n    this.zone = zone;\n    this.injector = injector;\n    this.scriptService = scriptService;\n    /**\r\n     * Prefix of the captcha element\r\n     */\n    this.captchaElemPrefix = \"ngx_captcha_id_\";\n    this.setupCaptcha = true;\n    /**\r\n     * Indicates if global domain 'recaptcha.net' should be used instead of default domain ('google.com')\r\n     */\n    this.useGlobalDomain = false;\n    this.useEnterprise = false;\n    /**\r\n     * Type\r\n     */\n    this.type = \"image\";\n    /**\r\n     * Tab index\r\n     */\n    this.tabIndex = 0;\n    /**\r\n     * Called when captcha receives successful response.\r\n     * Captcha response token is passed to event.\r\n     */\n    this.success = new EventEmitter();\n    /**\r\n     * Called when captcha is loaded. Event receives id of the captcha\r\n     */\n    this.load = new EventEmitter();\n    /**\r\n     * Called when captcha is reset.\r\n     */\n    this.reset = new EventEmitter();\n    /**\r\n     * Called when captcha is loaded & ready. I.e. when you need to execute captcha on component load.\r\n     */\n    this.ready = new EventEmitter();\n    /**\r\n     * Error callback\r\n     */\n    this.error = new EventEmitter();\n    /**\r\n     * Expired callback\r\n     */\n    this.expire = new EventEmitter();\n    /**\r\n     * Indicates if captcha should be set on load\r\n     */\n    this.setupAfterLoad = false;\n    /**\r\n     * If enabled, captcha will reset after receiving success response. This is useful\r\n     * when invisible captcha need to be resolved multiple times on same page\r\n     */\n    this.resetCaptchaAfterSuccess = false;\n    /**\r\n     * Required by ControlValueAccessor\r\n     */\n    this.onChange = val => {};\n    this.onTouched = val => {};\n    /**\r\n     * Indicates if captcha is loaded\r\n     */\n    this.isLoaded = false;\n  }\n  ngAfterViewInit() {\n    this.control = this.injector.get(NgControl, undefined, InjectFlags.Optional)?.control;\n  }\n  ngAfterViewChecked() {\n    if (this.setupCaptcha) {\n      this.setupCaptcha = false;\n      this.setupComponent();\n    }\n  }\n  ngOnChanges(changes) {\n    // cleanup scripts if language changed because they need to be reloaded\n    if (changes && changes.hl) {\n      // cleanup scripts when language changes\n      if (!changes.hl.firstChange && changes.hl.currentValue !== changes.hl.previousValue) {\n        this.scriptService.cleanup();\n      }\n    }\n    if (changes && changes.useGlobalDomain) {\n      // cleanup scripts when domain changes\n      if (!changes.useGlobalDomain.firstChange && changes.useGlobalDomain.currentValue !== changes.useGlobalDomain.previousValue) {\n        this.scriptService.cleanup();\n      }\n    }\n    this.setupCaptcha = true;\n  }\n  /**\r\n   * Gets captcha response as per reCaptcha docs\r\n   */\n  getResponse() {\n    return this.reCaptchaApi.getResponse(this.captchaId);\n  }\n  /**\r\n   * Gets Id of captcha widget\r\n   */\n  getCaptchaId() {\n    return this.captchaId;\n  }\n  /**\r\n   * Resets captcha\r\n   */\n  resetCaptcha() {\n    this.zone.run(() => {\n      // reset captcha using Google js api\n      this.reCaptchaApi.reset();\n      // required due to forms\n      this.onChange(undefined);\n      this.onTouched(undefined);\n      // trigger reset event\n      this.reset.next();\n    });\n  }\n  /**\r\n   * Gets last submitted captcha response\r\n   */\n  getCurrentResponse() {\n    return this.currentResponse;\n  }\n  /**\r\n   * Reload captcha. Useful when properties (i.e. theme) changed and captcha need to reflect them\r\n   */\n  reloadCaptcha() {\n    this.setupComponent();\n  }\n  ensureCaptchaElem(captchaElemId) {\n    const captchaElem = document.getElementById(captchaElemId);\n    if (!captchaElem) {\n      throw Error(`Captcha element with id '${captchaElemId}' was not found`);\n    }\n    // assign captcha alem\n    this.captchaElem = captchaElem;\n  }\n  /**\r\n   * Responsible for instantiating captcha element\r\n   */\n  renderReCaptcha() {\n    // run outside angular zone due to timeout issues when testing\n    // details: https://github.com/Enngage/ngx-captcha/issues/26\n    this.zone.runOutsideAngular(() => {\n      // to fix reCAPTCHA placeholder element must be an element or id\n      // https://github.com/Enngage/ngx-captcha/issues/96\n      setTimeout(() => {\n        this.captchaId = this.reCaptchaApi.render(this.captchaElemId, this.getCaptchaProperties());\n        this.ready.next();\n      }, 0);\n    });\n  }\n  /**\r\n   * Called when captcha receives response\r\n   * @param callback Callback\r\n   */\n  handleCallback(callback) {\n    this.currentResponse = callback;\n    this.success.next(callback);\n    this.zone.run(() => {\n      this.onChange(callback);\n      this.onTouched(callback);\n    });\n    if (this.resetCaptchaAfterSuccess) {\n      this.resetCaptcha();\n    }\n  }\n  getPseudoUniqueNumber() {\n    return new Date().getUTCMilliseconds() + Math.floor(Math.random() * 9999);\n  }\n  setupComponent() {\n    // captcha specific setup\n    this.captchaSpecificSetup();\n    // create captcha wrapper\n    this.createAndSetCaptchaElem();\n    this.scriptService.registerCaptchaScript({\n      useGlobalDomain: this.useGlobalDomain,\n      useEnterprise: this.useEnterprise\n    }, \"explicit\", grecaptcha => {\n      this.onloadCallback(grecaptcha);\n    }, this.hl);\n  }\n  /**\r\n   * Called when google's recaptcha script is ready\r\n   */\n  onloadCallback(grecapcha) {\n    // assign reference to reCaptcha Api once its loaded\n    this.reCaptchaApi = grecapcha;\n    if (!this.reCaptchaApi) {\n      throw Error(`ReCaptcha Api was not initialized correctly`);\n    }\n    // loaded flag\n    this.isLoaded = true;\n    // fire load event\n    this.load.next();\n    // render captcha\n    this.renderReCaptcha();\n    // setup component if it was flagged as such\n    if (this.setupAfterLoad) {\n      this.setupAfterLoad = false;\n      this.setupComponent();\n    }\n  }\n  generateNewElemId() {\n    return this.captchaElemPrefix + this.getPseudoUniqueNumber();\n  }\n  createAndSetCaptchaElem() {\n    // generate new captcha id\n    this.captchaElemId = this.generateNewElemId();\n    if (!this.captchaElemId) {\n      throw Error(`Captcha elem Id is not set`);\n    }\n    if (!this.captchaWrapperElem) {\n      throw Error(`Captcha DOM element is not initialized`);\n    }\n    // remove old html\n    this.captchaWrapperElem.nativeElement.innerHTML = \"\";\n    // create new wrapper for captcha\n    const newElem = this.renderer.createElement(\"div\");\n    newElem.id = this.captchaElemId;\n    this.renderer.appendChild(this.captchaWrapperElem.nativeElement, newElem);\n    // when use captcha in cdk stepper then throwing error Captcha element with id 'ngx_captcha_id_XXXX' not found\n    // to fix it checking ensureCaptchaElem in timeout so that its check in next call and its able to find element\n    setTimeout(() => {\n      // update captcha elem\n      if (this.captchaElemId) {\n        this.ensureCaptchaElem(this.captchaElemId);\n      }\n    }, 0);\n  }\n  /**\r\n   * To be aligned with the ControlValueAccessor interface we need to implement this method\r\n   * However as we don't want to update the recaptcha, this doesn't need to be implemented\r\n   */\n  writeValue(obj) {}\n  /**\r\n   * This method helps us tie together recaptcha and our formControl values\r\n   */\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n  /**\r\n   * At some point we might be interested whether the user has touched our component\r\n   */\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  /**\r\n   * Handles error callback\r\n   */\n  handleErrorCallback() {\n    this.zone.run(() => {\n      this.onChange(undefined);\n      this.onTouched(undefined);\n    });\n    this.error.next();\n  }\n  /**\r\n   * Handles expired callback\r\n   */\n  handleExpireCallback() {\n    this.expire.next();\n    // reset captcha on expire callback\n    this.resetCaptcha();\n  }\n}\n/** @nocollapse */\nBaseReCaptchaComponentDirective.ɵfac = function BaseReCaptchaComponentDirective_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || BaseReCaptchaComponentDirective)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(ScriptService));\n};\n/** @nocollapse */\nBaseReCaptchaComponentDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: BaseReCaptchaComponentDirective,\n  inputs: {\n    siteKey: \"siteKey\",\n    useGlobalDomain: \"useGlobalDomain\",\n    useEnterprise: \"useEnterprise\",\n    type: \"type\",\n    hl: \"hl\",\n    tabIndex: \"tabIndex\"\n  },\n  outputs: {\n    success: \"success\",\n    load: \"load\",\n    reset: \"reset\",\n    ready: \"ready\",\n    error: \"error\",\n    expire: \"expire\"\n  },\n  standalone: false,\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BaseReCaptchaComponentDirective, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.Renderer2\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i0.Injector\n    }, {\n      type: ScriptService\n    }];\n  }, {\n    siteKey: [{\n      type: Input\n    }],\n    useGlobalDomain: [{\n      type: Input\n    }],\n    useEnterprise: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    hl: [{\n      type: Input\n    }],\n    tabIndex: [{\n      type: Input\n    }],\n    success: [{\n      type: Output\n    }],\n    load: [{\n      type: Output\n    }],\n    reset: [{\n      type: Output\n    }],\n    ready: [{\n      type: Output\n    }],\n    error: [{\n      type: Output\n    }],\n    expire: [{\n      type: Output\n    }]\n  });\n})();\nvar ReCaptchaType;\n(function (ReCaptchaType) {\n  ReCaptchaType[ReCaptchaType[\"InvisibleReCaptcha\"] = 0] = \"InvisibleReCaptcha\";\n  ReCaptchaType[ReCaptchaType[\"ReCaptcha2\"] = 1] = \"ReCaptcha2\";\n})(ReCaptchaType || (ReCaptchaType = {}));\nclass InvisibleReCaptchaComponent extends BaseReCaptchaComponentDirective {\n  constructor(renderer, zone, injector, scriptService) {\n    super(renderer, zone, injector, scriptService);\n    this.renderer = renderer;\n    this.zone = zone;\n    this.injector = injector;\n    this.scriptService = scriptService;\n    /**\r\n     * This size representing invisible captcha\r\n     */\n    this.size = 'invisible';\n    /**\r\n     * Theme\r\n     */\n    this.theme = 'light';\n    /**\r\n     * Badge\r\n     */\n    this.badge = 'bottomright';\n    this.recaptchaType = ReCaptchaType.InvisibleReCaptcha;\n  }\n  ngOnChanges(changes) {\n    super.ngOnChanges(changes);\n  }\n  /**\r\n   * Programatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.\r\n   */\n  execute() {\n    // execute captcha\n    this.zone.runOutsideAngular(() => this.reCaptchaApi.execute(this.captchaId));\n  }\n  captchaSpecificSetup() {}\n  /**\r\n  * Gets reCaptcha properties\r\n  */\n  getCaptchaProperties() {\n    return {\n      'sitekey': this.siteKey,\n      'callback': response => this.zone.run(() => this.handleCallback(response)),\n      'expired-callback': () => this.zone.run(() => this.handleExpireCallback()),\n      'error-callback': () => this.zone.run(() => this.handleErrorCallback()),\n      'badge': this.badge,\n      'type': this.type,\n      'tabindex': this.tabIndex,\n      'size': this.size,\n      'theme': this.theme\n    };\n  }\n}\n/** @nocollapse */\nInvisibleReCaptchaComponent.ɵfac = function InvisibleReCaptchaComponent_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || InvisibleReCaptchaComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(ScriptService));\n};\n/** @nocollapse */\nInvisibleReCaptchaComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: InvisibleReCaptchaComponent,\n  selectors: [[\"ngx-invisible-recaptcha\"]],\n  viewQuery: function InvisibleReCaptchaComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.captchaWrapperElem = _t.first);\n    }\n  },\n  inputs: {\n    theme: \"theme\",\n    badge: \"badge\"\n  },\n  standalone: false,\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => InvisibleReCaptchaComponent),\n    multi: true\n  }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 0,\n  consts: [[\"captchaWrapperElem\", \"\"]],\n  template: function InvisibleReCaptchaComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", null, 0);\n    }\n  },\n  encapsulation: 2\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InvisibleReCaptchaComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-invisible-recaptcha',\n      template: `\n  <div #captchaWrapperElem></div>`,\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => InvisibleReCaptchaComponent),\n        multi: true\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.Renderer2\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i0.Injector\n    }, {\n      type: ScriptService\n    }];\n  }, {\n    theme: [{\n      type: Input\n    }],\n    badge: [{\n      type: Input\n    }],\n    captchaWrapperElem: [{\n      type: ViewChild,\n      args: ['captchaWrapperElem', {\n        static: false\n      }]\n    }]\n  });\n})();\nclass ReCaptcha2Component extends BaseReCaptchaComponentDirective {\n  constructor(renderer, zone, injector, scriptService) {\n    super(renderer, zone, injector, scriptService);\n    this.renderer = renderer;\n    this.zone = zone;\n    this.injector = injector;\n    this.scriptService = scriptService;\n    /**\r\n    * Name of the global expire callback\r\n    */\n    this.windowOnErrorCallbackProperty = 'ngx_captcha_error_callback';\n    /**\r\n    * Name of the global error callback\r\n    */\n    this.windowOnExpireCallbackProperty = 'ngx_captcha_expire_callback';\n    /**\r\n     * Theme\r\n     */\n    this.theme = 'light';\n    /**\r\n    * Size\r\n    */\n    this.size = 'normal';\n    this.recaptchaType = ReCaptchaType.ReCaptcha2;\n  }\n  ngOnChanges(changes) {\n    super.ngOnChanges(changes);\n  }\n  ngOnDestroy() {\n    window[this.windowOnErrorCallbackProperty] = {};\n    window[this.windowOnExpireCallbackProperty] = {};\n  }\n  captchaSpecificSetup() {\n    this.registerCallbacks();\n  }\n  /**\r\n   * Gets reCaptcha properties\r\n  */\n  getCaptchaProperties() {\n    return {\n      'sitekey': this.siteKey,\n      'callback': response => this.zone.run(() => this.handleCallback(response)),\n      'expired-callback': () => this.zone.run(() => this.handleExpireCallback()),\n      'error-callback': () => this.zone.run(() => this.handleErrorCallback()),\n      'theme': this.theme,\n      'type': this.type,\n      'size': this.size,\n      'tabindex': this.tabIndex\n    };\n  }\n  /**\r\n   * Registers global callbacks\r\n  */\n  registerCallbacks() {\n    window[this.windowOnErrorCallbackProperty] = super.handleErrorCallback.bind(this);\n    window[this.windowOnExpireCallbackProperty] = super.handleExpireCallback.bind(this);\n  }\n}\n/** @nocollapse */\nReCaptcha2Component.ɵfac = function ReCaptcha2Component_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || ReCaptcha2Component)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(ScriptService));\n};\n/** @nocollapse */\nReCaptcha2Component.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ReCaptcha2Component,\n  selectors: [[\"ngx-recaptcha2\"]],\n  viewQuery: function ReCaptcha2Component_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.captchaWrapperElem = _t.first);\n    }\n  },\n  inputs: {\n    theme: \"theme\",\n    size: \"size\"\n  },\n  standalone: false,\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ReCaptcha2Component),\n    multi: true\n  }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 0,\n  consts: [[\"captchaWrapperElem\", \"\"]],\n  template: function ReCaptcha2Component_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", null, 0);\n    }\n  },\n  encapsulation: 2\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ReCaptcha2Component, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-recaptcha2',\n      template: `\n  <div #captchaWrapperElem></div>`,\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => ReCaptcha2Component),\n        multi: true\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.Renderer2\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i0.Injector\n    }, {\n      type: ScriptService\n    }];\n  }, {\n    theme: [{\n      type: Input\n    }],\n    size: [{\n      type: Input\n    }],\n    captchaWrapperElem: [{\n      type: ViewChild,\n      args: ['captchaWrapperElem', {\n        static: false\n      }]\n    }]\n  });\n})();\nclass ReCaptchaV3Service {\n  constructor(scriptService, zone) {\n    this.scriptService = scriptService;\n    this.zone = zone;\n  }\n  /**\r\n   * Executes reCaptcha v3/Enterprise with given action and passes token via callback. You need to verify\r\n   * this callback in your backend to get meaningful results.\r\n   *\r\n   * For more information see https://developers.google.com/recaptcha/docs/v3\r\n   * For enterprise see https://cloud.google.com/recaptcha-enterprise/docs\r\n   *\r\n   * @param siteKey Site key found in your google admin panel\r\n   * @param action Action to log\r\n   * @param callback Callback function to to handle token\r\n   * @param config Optional configuration like useGlobalDomain to be provided\r\n   * @param errorCallback Optional Callback function to handle errors\r\n   */\n  execute(siteKey, action, callback, config, errorCallback) {\n    this.executeAsPromise(siteKey, action, config).then(callback).catch(error => errorCallback ? errorCallback(error) : console.error(error));\n  }\n  /**\r\n   * Executes reCaptcha v3/Enterprise with given action and returns token via Promise. You need to verify\r\n   * this token in your backend to get meaningful results.\r\n   *\r\n   * For more information see https://developers.google.com/recaptcha/docs/v3\r\n   * For enterprise see https://cloud.google.com/recaptcha-enterprise/docs\r\n   *\r\n   * @param siteKey Site key found in your google admin panel\r\n   * @param action Action to log\r\n   * @param config Optional configuration like useGlobalDomain to be provided\r\n   */\n  executeAsPromise(siteKey, action, config) {\n    return new Promise((resolve, reject) => {\n      const configuration = config || {};\n      const onRegister = grecaptcha => {\n        this.zone.runOutsideAngular(() => {\n          try {\n            grecaptcha.execute(siteKey, {\n              action\n            }).then(token => this.zone.run(() => resolve(token)));\n          } catch (error) {\n            reject(error);\n          }\n        });\n      };\n      this.scriptService.registerCaptchaScript(configuration, siteKey, onRegister);\n    });\n  }\n}\n/** @nocollapse */\nReCaptchaV3Service.ɵfac = function ReCaptchaV3Service_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || ReCaptchaV3Service)(i0.ɵɵinject(ScriptService), i0.ɵɵinject(i0.NgZone));\n};\n/** @nocollapse */\nReCaptchaV3Service.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ReCaptchaV3Service,\n  factory: ReCaptchaV3Service.ɵfac,\n  providedIn: \"root\"\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ReCaptchaV3Service, [{\n    type: Injectable,\n    args: [{\n      providedIn: \"root\"\n    }]\n  }], function () {\n    return [{\n      type: ScriptService\n    }, {\n      type: i0.NgZone\n    }];\n  }, null);\n})();\nclass NgxCaptchaModule {}\n/** @nocollapse */\nNgxCaptchaModule.ɵfac = function NgxCaptchaModule_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || NgxCaptchaModule)();\n};\n/** @nocollapse */\nNgxCaptchaModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxCaptchaModule,\n  declarations: [ReCaptcha2Component, InvisibleReCaptchaComponent],\n  imports: [CommonModule],\n  exports: [ReCaptcha2Component, InvisibleReCaptchaComponent]\n});\n/** @nocollapse */\nNgxCaptchaModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [ScriptService, ReCaptchaV3Service],\n  imports: [CommonModule]\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxCaptchaModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [ReCaptcha2Component, InvisibleReCaptchaComponent],\n      providers: [ScriptService, ReCaptchaV3Service],\n      exports: [ReCaptcha2Component, InvisibleReCaptchaComponent]\n    }]\n  }], null, null);\n})();\n\n/*\r\n * Public API\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { BaseReCaptchaComponentDirective, InvisibleReCaptchaComponent, NgxCaptchaModule, ReCaptcha2Component, ReCaptchaType, ReCaptchaV3Service, ScriptService };\n"],
  "mappings": "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",
  "names": ["ReCaptchaType"]
}
